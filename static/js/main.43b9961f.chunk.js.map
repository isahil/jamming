{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","search","onSearch","state","term","handleTermChange","e","setState","target","value","className","onChange","this","placeholder","onClick","Component","Track","renderAction","isRemoval","addTrack","onAdd","track","removeTrack","onRemove","handleClick","name","artist","album","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","clientID","process","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","fetch","headers","Authorization","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","userResponse","userJsonResponse","playlistId","uris","App","find","savedTrack","push","filter","updatePlaylistName","playListName","then","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43b9961f.chunk.js","sourcesContent":["const clientID = `${process.env.REACT_APP_CLIENT_ID}`;\nconst redirectURI = \"https://isahil.github.io/jamming\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) return accessToken;\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    \n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n  },\n\n  async search(term) {\n    const accessToken = this.getAccessToken();\n    const response = await fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${term}`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}` }\n      }\n    );\n    const jsonResponse = await response.json();\n    if (!jsonResponse.tracks) return [];\n    return await jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n  },\n  \n  async savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) return;\n\n    const accessToken = await this.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    const response = await fetch(`https://api.spotify.com/v1/me`, {\n      headers: headers\n    });\n    const jsonResponse = await response.json();\n    userId = await jsonResponse.id;\n\n    const userResponse = await fetch(\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\n      {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.stringify({ name: name })\n      }\n    );\n    const userJsonResponse = await userResponse.json();\n    const playlistId = await userJsonResponse.id;\n\n    return await fetch(\n      `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n      {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.stringify({ uris: trackUris })\n      }\n    );\n  }\n};\nexport default Spotify;\n","import React, { Component } from \"react\";\nimport './SearchBar.css'\n\nclass SearchBar extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      term: ''\n    }\n    \n  }\n  \n  search = () => this.props.onSearch(this.state.term)\n  \n  handleTermChange = e => this.setState({ term: e.target.value })\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\n        <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport './Track.css'\n\nclass Track extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      isRemoval: this.props.isRemoval\n    };\n  }\n\n  renderAction = () => this.state.isRemoval ? \"-\" : \"+\"\n\n  addTrack = () => this.props.onAdd(this.props.track)\n\n  removeTrack = () => this.props.onRemove(this.props.track)\n\n  handleClick = () => {\n    if(!this.state.isRemoval) return this.addTrack()\n    else return this.removeTrack()\n  }\n  \n  render() {\n    const { name, artist, album } = this.props.track;\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{name}</h3>\n          <p>\n            {artist} | {album}\n          </p>\n        </div>\n        <button onClick={this.handleClick} className=\"Track-action\">{this.renderAction()}</button>\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React, { Component } from \"react\";\nimport Track from \"../Track/Track\";\nimport './TrackList.css'\n\nclass TrackList extends Component {\n\n  render() {\n    const {onAdd, onRemove, isRemoval} = this.props\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map(track => (\n          <Track\n            key={track.id}\n            onAdd={onAdd}\n            onRemove={onRemove}\n            isRemoval={isRemoval}\n            track={track}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React, { Component } from 'react';\nimport TrackList from '../TrackList/TrackList'\nimport './SearchResults.css'\n\nclass SearchResults extends Component {\n\n    render() {\n      const {onAdd, searchResults} = this.props\n        return (\n          <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList onAdd={onAdd} isRemoval={false} tracks={searchResults} />\n          </div>\n        );\n    }\n}\n \nexport default SearchResults;","import React, { Component } from \"react\";\nimport TrackList from \"../TrackList/TrackList\";\nimport './Playlist.css'\nclass Playlist extends Component {\n  \n  // constructor(props){\n  //   super(props)\n  // }\n\n  handleNameChange = e => {\n    this.props.onNameChange(e.target.value)\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={'NewPlaylist'} />\n        <TrackList onRemove={this.props.onRemove} isRemoval={true} tracks={this.props.playListTracks}/>\n        <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\"\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playListName: \"New Playlist\",\n      playListTracks: []\n    };\n  }\n\n  addTrack = track => {\n    let tracks = this.state.playListTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) return;\n    tracks.push(track);\n    this.setState({ playListTracks: tracks });\n  };\n\n  removeTrack = track => {\n    let tracks = this.state.playListTracks;\n    tracks = tracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({ playListTracks: tracks });\n  };\n\n  updatePlaylistName = name => this.setState({ playListName: name });\n\n  savePlaylist = () => {\n    const trackUris = this.state.playListTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playListName, trackUris).then(() => {\n      this.setState({\n        playListName: \"New Playlist\",\n        playListTracks: []\n      });\n    });\n  };\n\n  search = term => {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n    \n    \n  };\n\n  render() {\n    const { searchResults, playListTracks } = this.state;\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              onAdd={this.addTrack}\n              searchResults={searchResults}\n            />\n            <Playlist\n              playListTracks={playListTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}